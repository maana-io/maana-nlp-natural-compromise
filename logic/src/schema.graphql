type Tag {
  text: String
  normal: String
  tags: [String!]
}

type Classifier {
  id: ID!
  name: String
  status: String
  serialized: String
}

type Classification {
  label: String
  value: Float
}

enum SUPPORTED_TOKENIZERS {
  WordTokenizer
  WordPunctTokenizer
  SentenceTokenizer
}

enum NORMALIZATION_OPTIONS {
  whitespace
  case
  numbers
  punctuation
  unicode
  contractions
  acronyms
  parentheses
  possessives
  plurals
  verbs
  honorifics
}

type RankedWord {
  word: String
  count: Float
}

input RankedWordInput {
  word: String
  count: Float
}

type Query {
  me: User

  # Compromise
  nouns(texts: [String!]!): [String!]!
  nounsTags(texts: [String!]!): [Tag!]!

  verbs(texts: [String!]!): [String!]!
  verbsTags(texts: [String!]!): [Tag!]!
  values(texts: [String!]!): [String!]!
  valuesTags(texts: [String!]!): [Tag!]!

  sentences(texts: [String!]!): [String!]!
  sentencesTags(texts: [String!]!): [Tag!]!

  contractions(texts: [String!]!): [String!]!
  contractionsTags(texts: [String!]!): [Tag!]!

  compromiseMatch(text: String, expression: String): [String!]!

  people(texts: [String!]!): [String!]!
  peopleTags(texts: [String!]!): [Tag!]!

  places(texts: [String!]!): [String!]!
  placesTags(texts: [String!]!): [Tag!]!

  organizations(texts: [String!]!): [String!]!
  organizationsTags(texts: [String!]!): [Tag!]!

  topics(texts: [String!]!): [String!]!
  topicsTags(texts: [String!]!): [Tag!]!

  normalize(text: String, options: [NORMALIZATION_OPTIONS!]): String

  # Natural
  tokenize(texts: [String!]!, tokenizerType: SUPPORTED_TOKENIZERS): [String]

  ## String Distances

  hammingDistance(source: String, target: String): Int
  jaroWinklerDistance(source: String, target: String): Int
  levenshteinDistance(
    source: String
    target: String
    insertionCost: Int
    deletionCost: Int
    substitutionCost: Int
  ): Int
  damerauLevenshteinDistance(
    source: String
    target: String
    transportationCost: Int
    restricted: Boolean
  ): Int
  diceCoefficient(source: String, target: String): Float

  ## Classififers

  classify(classifierName: String, text: String): [Classification]

  ## Sentiment

  sentiment(texts: [String!]!): [String!]!
  average(values: [String!]!): String!

  extractKeyword(sentences: [String!]!): [String!]!
  extractKeyphrases(sentences: [String!]!): [String!]!

  getTop10FrequenteWordsInText(text: [String!]!): [String!]!
  getTop100FrequenteRankedWordsInText(text: [String!]!): [RankedWord!]!

  combinedRanked(
    ranked1: [RankedWordInput!]!
    ranked2: [RankedWordInput!]!
  ): [RankedWord!]!

  combineLists(list1: [String!]!, list2: [String!]!): [String!]!
  getTop10WordsFromRankedWords(ranked: [RankedWordInput!]!): [String!]!
  getVocabulary(text: [String!]!): [String!]!
  sentencesWithImportantWords(
    sentences: [String!]!
    words: [String!]!
  ): [String!]!
  wordsFromSentences(sentences: [String!]!): [String!]!
  wordsToRankedWords(words: [String!]!): [RankedWord!]!
  conceptNetLookup(texts: [String!]!): [Concept]
  conceptNetLookupStartingWith(texts: [String!]!): [Concept]
  conceptNetLookupEndingWith(texts: [String!]!): [Concept]
  conceptNetLookupWithRleation(texts: [String!]!, relation: String): [Concept]
  getSurfaceTextFromConcepts(concepts: [ConceptInput]): [String]
}

input CNodeInput {
  label: String
  language: String
  term: String
  sense_label: String
}

type CNode {
  label: String
  language: String
  term: String
  sense_label: String
}

input RelInput {
  label: String
}

type Rel {
  label: String
}

input SourceInput {
  contributor: String
}

type Source {
  contributor: String
}

input EdgeInput {
  dataset: String
  end: CNodeInput
  license: String
  rel: RelInput
  sources: [SourceInput]
  start: CNodeInput
  surfaceText: String
  weight: Float
}

type Edge {
  dataset: String
  end: CNode
  license: String
  rel: Rel
  sources: [Source]
  start: CNode
  surfaceText: String
  weight: Float
}

input ConceptInput {
  edges: [EdgeInput]
}

type Concept {
  edges: [Edge]
}

type AuthPayload {
  token: String!
  user: User!
}

type User {
  id: ID!
  email: String!
  name: String!
}

type Mutation {
  createClassifier(name: String!): Classifier
  addLabeledDocumentToClassifier(
    classifierName: String
    text: String
    label: String
  ): Classifier
}

type Subscription {
  feedSubscription: String!
}
